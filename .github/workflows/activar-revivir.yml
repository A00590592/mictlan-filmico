name: Revivir Rápido Unificado

on:
  workflow_dispatch:
  repository_dispatch:
    types: [revivir_trigger]

jobs:
  altar_revivir:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Enviar MQTT (sin dependencias) y registrar log
        env:
          MQTT_USER: ${{ secrets.ALTAR_USER }}
          MQTT_PASS: ${{ secrets.ALTAR_PASS }}
          MQTT_HOST: ${{ secrets.ALTAR_HOST }}
        run: |
          set -e
          mkdir -p data

          cat > send_mqtt_and_log.py << 'PY'
import os, ssl, socket, json
from datetime import datetime

HOST = os.environ["MQTT_HOST"]
PORT = 8883
USER = os.environ["MQTT_USER"]
PWD  = os.environ["MQTT_PASS"]
TOPIC = "Mictlan"
PAYLOAD = "revivir"
LOG_FILE = "data/revivir_log.json"
CLIENT_ID = "GHActions-" + datetime.utcnow().strftime("%Y%m%d%H%M%S")

def enc_utf8(s: str) -> bytes:
    b = s.encode("utf-8")
    return len(b).to_bytes(2, "big") + b

def enc_varint(n: int) -> bytes:
    out = bytearray()
    while True:
        b = n % 128
        n //= 128
        if n > 0:
            b |= 0x80
        out.append(b)
        if n == 0:
            break
    return bytes(out)

def pkt_connect(client_id: str, username: str, password: str, keepalive: int = 60) -> bytes:
    # Variable header
    vh = enc_utf8("MQTT") + bytes([4])  # Protocol Level 4 (MQTT 3.1.1)
    flags = 0xC2  # user name + password + clean session
    vh += bytes([flags]) + keepalive.to_bytes(2, "big")
    # Payload
    payload = enc_utf8(client_id) + enc_utf8(username) + enc_utf8(password)
    rl = enc_varint(len(vh) + len(payload))
    return bytes([0x10]) + rl + vh + payload  # 0x10 = CONNECT

def pkt_publish(topic: str, payload: str) -> bytes:
    vh = enc_utf8(topic)  # QoS 0 (no packet id)
    pl = payload.encode("utf-8")
    rl = enc_varint(len(vh) + len(pl))
    return bytes([0x30]) + rl + vh + pl  # 0x30 = PUBLISH QoS0

def pkt_disconnect() -> bytes:
    return b"\xE0\x00"

def recv_connack(sock) -> None:
    sock.settimeout(3)
    hdr = sock.recv(4)  # esperado: 0x20 0x02 0x00 0x00 (session present=0, rc=0)
    # No lanzamos error si el broker manda más/menos bytes; objetivo es tolerante.

def publish_tls(host: str, port: int, user: str, pwd: str, topic: str, msg: str) -> None:
    ctx = ssl.create_default_context()
    # Si tu broker usa CA pública válida, puedes dejar verificación ON:
    ctx.check_hostname = False
    ctx.verify_mode = ssl.CERT_NONE

    with socket.create_connection((host, port), timeout=5) as raw:
        with ctx.wrap_socket(raw, server_hostname=host) as s:
            s.sendall(pkt_connect(CLIENT_ID, user, pwd))
            try:
                recv_connack(s)
            except Exception:
                pass  # seguimos: algunos brokers responden diferente / tardan
            s.sendall(pkt_publish(topic, msg))
            try:
                s.sendall(pkt_disconnect())
            except Exception:
                pass

def append_log(path: str, message: str) -> None:
    os.makedirs(os.path.dirname(path), exist_ok=True)
    data = []
    if os.path.exists(path):
        try:
            with open(path, "r", encoding="utf-8") as f:
                data = json.load(f)
        except Exception:
            data = []
    entry = {"mensaje": message, "ts": datetime.utcnow().isoformat() + "Z"}
    data.append(entry)
    with open(path, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def main():
    # 1) Publicar MQTT
    publish_tls(HOST, PORT, USER, PWD, TOPIC, PAYLOAD)
    # 2) Registrar log
    append_log(LOG_FILE, "Revivir desde la web")

if __name__ == "__main__":
    main()
PY

          python3 send_mqtt_and_log.py

      - name: Commit & push log
        env:
          ALTAR_TOKEN: ${{ secrets.ALTAR_TOKEN }}
        run: |
          git config --global user.name "Altar Mictlan"
          git config --global user.email "altar@mictlan.io"
          git add data/revivir_log.json
          git commit -m "Revivir registrado (workflow unificado rápido)" || echo "Nada que commitear"
          git push https://x-access-token:${ALTAR_TOKEN}@github.com/${{ github.repository }}.git
